{"version":3,"file":"main.js","mappings":"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","sources":["webpack://praktika/./src/components/api.js","webpack://praktika/./src/components/card.js","webpack://praktika/./src/components/modal.js","webpack://praktika/./src/components/validation.js","webpack://praktika/./src/index.js"],"sourcesContent":["const config = {\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-38',\n  headers: {\n    authorization: '663c4b8a-62c7-4f3c-863c-ebe8221424f2',\n    'Content-Type': 'application/json',\n  },\n};\n\nfunction showError() {\n  console.log('Не удалось загрузить данные');\n}\n\n// Загрузка информации о пользователе\nfunction loadInfoUser() {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: 'GET',\n    headers: {\n      authorization: `${config.headers.authorization}`,\n    },\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((userData) => {\n      return userData;\n    })\n    .catch(showError);\n}\n\n// Загрузка карточек с сервера\nfunction loadCards() {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: 'GET',\n    headers: {\n      authorization: `${config.headers.authorization}`,\n    },\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((cardsData) => {\n      return cardsData;\n    })\n    .catch(showError);\n}\n\n// Запрос на обновление данных профиля\nfunction updateInfoProfile(nameProfile, aboutProfile) {\n  return fetch(`${config.baseUrl}/users/me`, {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: nameProfile,\n      about: aboutProfile,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((infoProfile) => {\n      return infoProfile;\n    })\n    .catch(showError);\n}\n\n// Запрос на добавление карточки\nfunction addCard(cardName, link) {\n  return fetch(`${config.baseUrl}/cards`, {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: cardName,\n      link: link,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((dataCard) => {\n      return dataCard;\n    })\n    .catch(showError);\n}\n\n// Запрос на удаление карточки\nfunction removeCard(cardId) {\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\n    method: 'DELETE',\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((newCard) => {\n      return newCard;\n    })\n    .catch(showError);\n}\n\n// Запрос на постановку лайка\nfunction likeCard(cardId) {\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n    method: 'PUT',\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((updatedCard) => {\n      return updatedCard;\n    })\n    .catch(showError);\n}\n\n// Запрос на снятие лайка\nfunction unlikeCard(cardId) {\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\n    method: 'DELETE',\n    headers: config.headers,\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((updatedCard) => {\n      return updatedCard;\n    })\n    .catch(showError);\n}\n\n// Запрос на обновление аватара пользователя\nfunction updateAvatar(avatar) {\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: avatar,\n    }),\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n    .then((updatedUser) => {\n      return updatedUser;\n    })\n    .catch(showError);\n}\n\nexport { loadInfoUser, loadCards, showError, updateInfoProfile, addCard, removeCard, likeCard, unlikeCard, updateAvatar };\n","import { showError, removeCard, likeCard, unlikeCard } from './api.js';\n// @todo: Темплейт карточки\nconst cardTemplate = document.querySelector('#card-template').content;\n\n// @todo: Функция создания карточки\nfunction createCard(cardItem, userId, deleteCard, clickImage) {\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  const cardImage = cardElement.querySelector('.card__image');\n  const cardLike = cardElement.querySelector('.card__like-count');\n  const cardDelButton = cardElement.querySelector('.card__delete-button');\n\n  cardElement.querySelector('.card__title').textContent = cardItem.name;\n  cardImage.src = cardItem.link;\n  cardImage.alt = cardItem.name;\n\n  cardLike.textContent = cardItem.likes.length;\n\n  // Скрыть корзину на чужих карточках\n  if (cardItem.owner._id !== userId) {\n    cardDelButton.style.display = 'none';\n  }\n\n  //Обработчик удаления карточки\n  const buttonDel = cardElement.querySelector('.card__delete-button');\n  if (cardItem.owner._id === userId)\n    buttonDel.addEventListener('click', () => {\n      removeCard(cardItem._id)\n        .then(() => {\n          deleteCard(cardElement);\n        })\n        .catch(showError);\n    });\n\n  const buttonLike = cardElement.querySelector('.card__like-button');\n\n  // Проверяем, лайкнули ли мы карточку\n  const likedByMe = cardItem.likes.some((like) => like._id === userId);\n  if (likedByMe) {\n    buttonLike.classList.add('card__like-button_is-active');\n  }\n  // Обработчик лайка\n  buttonLike.addEventListener('click', () => {\n    const activeLike = buttonLike.classList.contains(\n      'card__like-button_is-active'\n    );\n\n    if (activeLike) {\n      unlikeCard(cardItem._id)\n        .then((updatedCard) => {\n          buttonLike.classList.remove('card__like-button_is-active');\n          cardLike.textContent = updatedCard.likes.length;\n          cardItem.likes = updatedCard.likes;\n        })\n        .catch(showError);\n    } else {\n      likeCard(cardItem._id)\n        .then((updatedCard) => {\n          buttonLike.classList.add('card__like-button_is-active');\n          cardLike.textContent = updatedCard.likes.length;\n          cardItem.likes = updatedCard.likes;\n        })\n        .catch(showError);\n    }\n  });\n\n  //обработчик клика по изображению\n  cardImage.addEventListener('click', clickImage);\n  return cardElement;\n}\n\n// @todo: Функция удаления карточки\nfunction deleteCard(cardElement) {\n  cardElement.remove();\n}\n\nexport { createCard, deleteCard };\n","function openModal(modalWindow) {\n  modalWindow.classList.add('popup_is-animated');\n  setTimeout(function () {\n    modalWindow.classList.add('popup_is-opened');\n    document.addEventListener('keydown', closeEsc);\n  }, 100);\n}\n\nfunction closeModal(modalWindow) {\n  modalWindow.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeEsc);\n}\n\nfunction closeOverlay(evt) {\n  if (evt.target === evt.currentTarget) {\n    closeModal(evt.currentTarget);\n  }\n}\n\nfunction closeEsc(evt) {\n  if (evt.key === 'Escape') {\n    const popupOpen = document.querySelector('.popup_is-opened');\n    closeModal(popupOpen);\n  }\n}\n\nexport { openModal, closeModal, closeOverlay };\n","// Функция, которая добавляет класс с ошибкой\nfunction showInputError(formElement, inputElement, errorMessage) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add('popup__input-error');\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add('popup__input-error_active'); // Показываем сообщение об ошибке\n}\n\n// Функция, которая удаляет класс с ошибкой\nfunction hideInputError(formElement, inputElement) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove('popup__input-error');\n  errorElement.classList.remove('popup__input-error_active'); // Скрываем сообщение об ошибке\n  errorElement.textContent = '';\n}\n\n// Функция, которая проверяет валидность поля\nfunction isValid(formElement, inputElement) {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity('');\n  }\n\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, inputElement.validationMessage);\n  } else {\n    hideInputError(formElement, inputElement);\n  }\n}\n\n// Функция, которая добавляет слушатель события\n// всем полям ввода внутри формы\nfunction setEventListeners(formElement) {\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'));\n  const buttonElement = formElement.querySelector('.popup__button');\n\n  toggleButtonState(inputList, buttonElement);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener('input', () => {\n      isValid(formElement, inputElement);\n\n      toggleButtonState(inputList, buttonElement);\n    });\n  });\n}\n\n// Функция, которая найдет и переберёт\n// все формы на странице\nfunction enableValidation() {\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\n  formList.forEach((formElement) => {\n    setEventListeners(formElement);\n  });\n}\n\n// Функция, которая проверяет наличие невалидного поля и сигнализирует,\n// можно ли разблокировать кнопку сабмита\nfunction hasInvalidInput(inputList) {\n  return inputList.some((inputElement) => {\n    return !inputElement.validity.valid;\n  });\n}\n\n// Функция для отключения и включения кнопки\nfunction toggleButtonState(inputList, buttonElement) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add('popup__button_inactive');\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove('popup__button_inactive');\n  }\n}\n\n// Функция очистки полей формы\nfunction clearValidation(formElement) {\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'));\n  const buttonElement = formElement.querySelector('.popup__button');\n\n  inputList.forEach((inputElement) => {\n    // Удаляем красное подчеркивание\n    inputElement.classList.remove('popup__input-error');\n\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    // Удаляем текст ошибки\n    errorElement.textContent = '';\n    errorElement.classList.remove('popup__input-error_active');\n  });\n\n  toggleButtonState(inputList, buttonElement);\n}\n\nexport { enableValidation, clearValidation };\n","import { createCard, deleteCard } from './components/card.js';\nimport { openModal, closeModal, closeOverlay } from './components/modal.js';\nimport { enableValidation, clearValidation } from './components/validation.js';\nimport { loadInfoUser, loadCards, showError, updateInfoProfile, addCard, updateAvatar } from './components/api.js';\nimport '../pages/index.css';\n\nenableValidation();\n\n// Параллельно загружаем данные пользователя и карточки\n// После успешной загрузки обновляем профиль пользователя и отображаем карточки\n\nconst promises = [loadInfoUser(), loadCards()];\nlet globalUserData;\nPromise.all(promises)\n  .then(([userData, cardsData]) => {\n    globalUserData = userData;\n    const profileTitle = document.querySelector('.profile__title');\n    const profileDescript = document.querySelector('.profile__description');\n    const profileAvatar = document.querySelector('.profile__image');\n    // Обновляем информацию в профиле пользователя\n    profileTitle.textContent = userData.name;\n    profileDescript.textContent = userData.about;\n    profileAvatar.src = userData.avatar;\n\n    const cardList = document.querySelector('.places__list');\n    cardsData.forEach((cardItem) => { // Берём каждую карточку из списка загруженных данных cardsData\n      const card = createCard(cardItem, userData._id, deleteCard, clickImage); //Создаём хтмл-элемент карточки с данными cardItem, айди пользователя(чтобы знать можем ли мы ее удалять), с функциями удаления и отображения картинок\n      cardList.append(card); // Добавляем картоку на страницу\n    });\n  })\n  .catch(showError);\n\nconst editProfile = document.querySelector('.profile__edit-button');\nconst addButton = document.querySelector('.profile__add-button');\nconst editPopup = document.querySelector('.popup_type_edit');\nconst newCardPopup = document.querySelector('.popup_type_new-card');\nconst editButtonAvatar = document.querySelector('.profile__avatar-edit-button');\nconst editPopupAvatar = document.querySelector('.popup_avatar_edit');\nconst formEditAvatar = document.querySelector('[name=\"edit-avatar\"]');\n\n// Открытие попапа редактирования профиля\neditProfile.addEventListener('click', function () {\n  const nameProfile = document.querySelector('.profile__title').textContent;\n  const descriptionProfile = document.querySelector(\n    '.profile__description'\n  ).textContent;\n\n  nameInput.value = nameProfile; //Для отображения текущих имени и описания\n  jobInput.value = descriptionProfile;\n\n  clearValidation(formProfileEdit);\n  openModal(editPopup);\n});\n\n// Открытие попапа добавления новой карточки\naddButton.addEventListener('click', function () {\n  clearValidation(formCards);\n  openModal(newCardPopup);\n});\n\n//Открытие попапа с редактированием аватара\neditButtonAvatar.addEventListener('click', function () {\n  clearValidation(formEditAvatar);\n  openModal(editPopupAvatar);\n});\n\n//функция открытия попапа с изображением\nfunction clickImage(evt) {\n  const imagePopup = document.querySelector('.popup__image');\n  const typeImagePopup = document.querySelector('.popup_type_image');\n\n  const imageSrc = evt.target.src;\n  const imageText = evt.target.alt;\n\n  imagePopup.src = imageSrc;\n  imagePopup.alt = imageText;\n\n  openModal(typeImagePopup);\n}\n\n// Закрытие попапов при клике на крестик\nconst closeButton = document.querySelectorAll('.popup__close');\ncloseButton.forEach(function (button) {\n  button.addEventListener('click', function () {\n    const listPopup = button.closest('.popup');\n\n    if (!listPopup.classList.contains('popup_type_image\"')) {\n      const form = listPopup.querySelector('form');\n      if (form) {\n        clearValidation(form); // очистка валидации при закрытии у всех попапов, кроме попапа с изображением\n      }\n    }\n    closeModal(listPopup);\n  });\n});\n\n// Закрытие попапов при клике на оверлей\nconst popupAll = document.querySelectorAll('.popup');\npopupAll.forEach(function (overlay) {\n  overlay.addEventListener('click', closeOverlay);\n});\n\nconst formProfileEdit = document.querySelector('[name=\"edit-profile\"]');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst jobInput = document.querySelector('.popup__input_type_description');\n\n// Обработчик «отправки» формы редактирования профиля\nformProfileEdit.addEventListener('submit', function (evt) {\n  evt.preventDefault(); //предотвращаем перезагрузку страницы\n\n  const nameProfile = nameInput.value; // nameInput уже определен\n  const aboutProfile = jobInput.value; // jobInput уже определен\n\n  updateInfoProfile(nameProfile, aboutProfile) // передаем значения из формы\n    .then((infoProfile) => {\n      const profileTitle = document.querySelector('.profile__title');\n      const profileDescript = document.querySelector('.profile__description');\n\n      profileTitle.textContent = infoProfile.name;\n      profileDescript.textContent = infoProfile.about;\n\n      closeModal(editPopup); //закрытие формы после нажатия на сохранить\n    })\n    .catch(showError);\n});\n\nconst linkInput = document.querySelector('.popup__input_link_avatar');\n\n// Обработчик «отправки» формы редактирования аватарa\nformEditAvatar.addEventListener('submit', function (evt) {\n  evt.preventDefault(); //предотвращаем перезагрузку страницы\n\n  const avatarUrl = linkInput.value;\n  updateAvatar(avatarUrl)\n    .then((updatedUser) => {\n      const profileImage = document.querySelector('.profile__image');\n      profileImage.src = updatedUser.avatar;\n\n      closeModal(editPopupAvatar); //закрытие формы после нажатия на сохранить\n    })\n    .catch(showError);\n});\n\nconst formCards = document.querySelector('[name=\"new-place\"]');\nconst nameCardInput = document.querySelector('.popup__input_type_card-name');\nconst urlInput = document.querySelector('.popup__input_type_url');\n\n// Обработчик «отправки» формы добавления карточки\nformCards.addEventListener('submit', function (evt) {\n  evt.preventDefault(); //предотвращаем перезагрузку страницы\n\n  const cardName = nameCardInput.value;\n  const link = urlInput.value;\n\n  addCard(cardName, link) // Передаём значения из формы\n    .then((dataCard) => {\n      const newCard = {\n        name: dataCard.name,\n        link: dataCard.link,\n        likes: dataCard.likes,\n        owner: dataCard.owner,\n      };\n\n      const cardItem = createCard(newCard, globalUserData._id, deleteCard, clickImage);\n      document.querySelector('.places__list').prepend(cardItem);\n\n      formCards.reset(); // Очищаем форму\n      closeModal(newCardPopup); //закрытие формы после нажатия на сохранить\n    })\n    .catch(console.log('EEEEE'));\n});\n"],"names":["config","baseUrl","headers","authorization","showError","console","log","cardTemplate","document","querySelector","content","createCard","cardItem","userId","deleteCard","clickImage","cardElement","cloneNode","cardImage","cardLike","cardDelButton","textContent","name","src","link","alt","likes","length","owner","_id","style","display","buttonDel","addEventListener","cardId","fetch","concat","method","then","res","ok","json","Promise","reject","status","newCard","catch","buttonLike","some","like","classList","add","contains","updatedCard","remove","likeCard","openModal","modalWindow","setTimeout","closeEsc","closeModal","removeEventListener","closeOverlay","evt","target","currentTarget","key","toggleButtonState","inputList","buttonElement","inputElement","validity","valid","hasInvalidInput","disabled","clearValidation","formElement","Array","from","querySelectorAll","forEach","errorElement","id","patternMismatch","setCustomValidity","dataset","errorMessage","hideInputError","showInputError","validationMessage","isValid","setEventListeners","globalUserData","promises","userData","cardsData","all","_ref","_ref2","profileTitle","profileDescript","profileAvatar","about","avatar","cardList","card","append","editProfile","addButton","editPopup","newCardPopup","editButtonAvatar","editPopupAvatar","formEditAvatar","imagePopup","typeImagePopup","imageSrc","imageText","nameProfile","descriptionProfile","nameInput","value","jobInput","formProfileEdit","formCards","button","listPopup","closest","form","overlay","aboutProfile","preventDefault","body","JSON","stringify","infoProfile","linkInput","updatedUser","nameCardInput","urlInput","cardName","dataCard","prepend","reset"],"sourceRoot":""}